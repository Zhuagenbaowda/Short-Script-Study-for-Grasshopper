#region Usings
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;

using Rhino;
using Rhino.Geometry;

using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;
#endregion

public class Script_Instance : GH_ScriptInstance
{
    private void RunScript(
	Mesh mesh,
	string file_address,
	bool transform,
	ref object new_mesh)
    {
     mesh.Unweld(0, false);
     mesh.TextureCoordinates.Clear();

     for(int i = 0;i < mesh.Vertices.Count;i++)
     {
     mesh.TextureCoordinates.Add(0, 0);
     }
      
     int size = (int) Math.Ceiling(Math.Sqrt(mesh.Faces.Count));
     double fSize = (double) size * 2;

     Bitmap bitmap = new Bitmap(size * 2, size * 2);

     for(int i = 0;i < mesh.Faces.Count;i++)
     {
     MeshFace face = mesh.Faces[i];
     int x = (i % size) * 2;
     int y = (i / size) * 2;
     double fx = (double) x;
     double fy = (double) y;

     mesh.TextureCoordinates[face.A] = new Point2f((fx + 0.5) / fSize, (fy + 0.5) / fSize);
     mesh.TextureCoordinates[face.B] = new Point2f((fx + 1.5) / fSize, (fy + 0.5) / fSize);
     mesh.TextureCoordinates[face.C] = new Point2f((fx + 1.5) / fSize, (fy + 1.5) / fSize);
     mesh.TextureCoordinates[face.D] = new Point2f((fx + 0.5) / fSize, (fy + 1.5) / fSize);

     Color colorA = mesh.VertexColors[face.A];
     colorA = Color.FromArgb(255, colorA.R, colorA.G, colorA.B);
     Color colorB = mesh.VertexColors[face.B];
     colorB = Color.FromArgb(255, colorB.R, colorB.G, colorB.B);
     Color colorC = mesh.VertexColors[face.C];
     colorC = Color.FromArgb(255, colorC.R, colorC.G, colorC.B);
     Color colorD = mesh.VertexColors[face.D];
     colorD = Color.FromArgb(255, colorD.R, colorD.G, colorD.B);

     y = size * 2 - 2 - y;
     bitmap.SetPixel(x + 0, y + 1, colorA);
     bitmap.SetPixel(x + 1, y + 1, colorB);
     bitmap.SetPixel(x + 1, y + 0, colorC);
     bitmap.SetPixel(x + 0, y + 0, colorD);
     }

     if(transform)
     {
     bitmap.Save(file_address, System.Drawing.Imaging.ImageFormat.Png);
     }
     new_mesh = mesh;
    }
}
